// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: musics.sql

package db

import (
	"context"
)

const createMusic = `-- name: CreateMusic :exec
INSERT INTO musics (
  userid, title, artist, link
) VALUES (
  $1, $2, $3, $4
)
`

type CreateMusicParams struct {
	Userid int64  `json:"userid"`
	Title  string `json:"title"`
	Artist string `json:"artist"`
	Link   string `json:"link"`
}

func (q *Queries) CreateMusic(ctx context.Context, arg CreateMusicParams) error {
	_, err := q.db.Exec(ctx, createMusic,
		arg.Userid,
		arg.Title,
		arg.Artist,
		arg.Link,
	)
	return err
}

const deleteMusic = `-- name: DeleteMusic :exec
DELETE FROM musics
WHERE id = $1 AND userid = $2
`

type DeleteMusicParams struct {
	ID     int64 `json:"id"`
	Userid int64 `json:"userid"`
}

func (q *Queries) DeleteMusic(ctx context.Context, arg DeleteMusicParams) error {
	_, err := q.db.Exec(ctx, deleteMusic, arg.ID, arg.Userid)
	return err
}

const listMusics = `-- name: ListMusics :many
SELECT id, userid, title, artist, link FROM musics
ORDER BY title
`

func (q *Queries) ListMusics(ctx context.Context) ([]Music, error) {
	rows, err := q.db.Query(ctx, listMusics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Music
	for rows.Next() {
		var i Music
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.Title,
			&i.Artist,
			&i.Link,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMusic = `-- name: UpdateMusic :exec
UPDATE musics 
  set title = $3,
  artist = $4,
  link = $5
WHERE
  id = $1 AND userid = $2
`

type UpdateMusicParams struct {
	ID     int64  `json:"id"`
	Userid int64  `json:"userid"`
	Title  string `json:"title"`
	Artist string `json:"artist"`
	Link   string `json:"link"`
}

func (q *Queries) UpdateMusic(ctx context.Context, arg UpdateMusicParams) error {
	_, err := q.db.Exec(ctx, updateMusic,
		arg.ID,
		arg.Userid,
		arg.Title,
		arg.Artist,
		arg.Link,
	)
	return err
}
